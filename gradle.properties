# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
# app
App development project repositories in git
REACT NATIVE
1. BMI Calculator: https://github.com/Error401-incognito/BMIApp.git
2.login:https://github.com/Error401-incognito/login.git
3.imperial system:https://github.com/Error401-incognito/imperial.git
4.Navigation:https://github.com/Error401-incognito/navigation.git
5.TODO:https://github.com/Error401-incognito/TOdo.git
6.Expensemanager:https://github.com/Error401-incognito/expensemanager.git
7.calculator: https://github.com/Error401-incognito/calculator.git

plugins:navigation:
npm install @react-navigation/native @react-navigation/stack react-native-gesture-handler react-native-reanimated
todo:
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/viewpager


commands: npx create-expo-app name
npm start/npx run android


App development project repositories in git:
CORDOVA
1.geolocation: https://github.com/Error401-incognito/geoloc.git
2.login:https://github.com/Error401-incognito/loginc.git
3.Alertapp:https://github.com/Error401-incognito/AlertApp.git
plugins:geolocation:
 cordova plugin add cordova-plugin-geolocation
alert msg:
cordova plugin add cordova-plugin-dialogs


commands:cordova create AlertApp
cd AlertApp
cordova platform add android
cordova build android
cordova run android



App development project repositories in git:
JAVA
1.Text Colour Change:https://github.com/Error401-incognito/colourchagetext.git
2.Alert message:https://github.com/Error401-incognito/alertmsg.git
3.ui ux components: https://github.com/Error401-incognito/uiuxlayout.git
4. Layouts: https://github.com/Error401-incognito/uiuxlayout.git
5.geolocation: https://github.com/Error401-incognito/geolocation.git
6.counterapp:https://github.com/Error401-incognito/counterapp.git


Library management using firebase(already available code):https://github.com/codehunter-sk/Lib_Mgt_02

https://github.com/ramyaa06?tab=repositories

git clone https://github.com/ramyaa06/rn_expenses
rn_navigation
rn_login
rn_textcolor
rn_textalignment
android_layoutbasedform
android_textcolor
android_alertmessage
rn_unitconvertor
rn_bmi
flutter_todolist
cordova_geolocation
cordova_login
//react todo
import React, { useState } from 'react';
import { View, Text, TextInput, Button, FlatList, StyleSheet, TouchableOpacity } from 'react-native';

const ToDoList = () => {
  const [tasks, setTasks] = useState([]);
  const [taskName, setTaskName] = useState('');

  const addTask = () => {
    if (taskName.trim() !== '') {
      setTasks([...tasks, { name: taskName, done: false }]);
      setTaskName('');
    }
  };

  const toggleTask = (index) => {
    const updatedTasks = [...tasks];
    updatedTasks[index].done = !updatedTasks[index].done;
    setTasks(updatedTasks);
  };

  const deleteTask = (index) => {
    const updatedTasks = [...tasks];
    updatedTasks.splice(index, 1);
    setTasks(updatedTasks);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>To-Do List</Text>
      <FlatList
        data={tasks}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item, index }) => (
          <View style={styles.taskItem}>
            <TouchableOpacity onPress={() => toggleTask(index)}>
              <Text
                style={[
                  styles.taskText,
                  { textDecorationLine: item.done ? 'line-through' : 'none' },
                ]}
              >
                {item.name}
              </Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => deleteTask(index)}>
              <Text style={styles.deleteButton}>Delete</Text>
            </TouchableOpacity>
          </View>
        )}
      />
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Add a new task"
          value={taskName}
          onChangeText={(text) => setTaskName(text)}
        />
        <Button title="Add Task" onPress={addTask} />
      </View>
    </View>
  );
};
//state&props
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff',
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  taskItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 8,
    padding: 8,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
  },
  taskText: {
    fontSize: 16,
    marginLeft: 8,
  },
  deleteButton: {
    color: 'red',
    marginLeft: 8,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 16,
  },
  input: {
    flex: 1,
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginRight: 8,
    paddingHorizontal: 8,
    backgroundColor: '#f2f2f2',
  },
});

export default ToDoList;


import React, {useState} from 'react';
import {Button, Text, View} from 'react-native';

const Cat = props => {
  const [isHungry, setIsHungry] = useState(true);

  return (
    <View>
      <Text>
        I am {props.name}, and I am {isHungry ? 'hungry' : 'full'}!
      </Text>
      <Button
        onPress={() => {
          setIsHungry(false);
        }}
        disabled={!isHungry}
        title={isHungry ? 'Pour me some milk, please!' : 'Thank you!'}
      />
    </View>
  );
};

const Cafe = () => {
  return (
    <>
      <Cat name="Munkustrap" />
      <Cat name="Spot" />
    </>
  );
};

export default Cafe;

//flexbox
App.js
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import React from "react";
import zero from './App-flexbox00';
import first from './App-flexbox01';
import second from './App-flexbox02';
const Stack = createNativeStackNavigator();
const App = () => {
    return (
        <NavigationContainer>
            <Stack.Navigator>
                <Stack.Screen name="zero" component={zero}></Stack.Screen>
                <Stack.Screen name="first" component={first}></Stack.Screen>
                <Stack.Screen name="second" component={second}></Stack.Screen>
            </Stack.Navigator>
        </NavigationContainer>
    );
}
export default App;

App-flexbox00.js
import React from "react";
import { Text, TouchableOpacity, View } from "react-native";
const App = ({navigation}) => {
    return (
        <View style={{
            		flex:1,
            		justifyContent:'center',
            		alignItems:'center',
            		backgroundColor:'gray'}}>
            <TouchableOpacity
            style={{margin:20,padding:20,backgroundColor:'#ddd',borderRadius:10}}
            onPress={() => {navigation.navigate('first')}}>
                <Text>first</Text>
            </TouchableOpacity> 
            <TouchableOpacity
            style={{margin:20,padding:20,backgroundColor:'#ddd',borderRadius:10}}
            onPress={() => {navigation.navigate('second')}}>
                <Text>second</Text>
            </TouchableOpacity>
        </View>
    );
}
export default App;

App-flexbox01.js
import React from "react";
import { View } from "react-native";
const App = () => {
    return (
        <View style={{
            flex:1,
            justifyContent:'center',
            alignItems:'center',
            backgroundColor:'gray'}}>
            <View style={{width:100,height:100,backgroundColor:'red'}}></View>
            <View style={{width:100,height:100,backgroundColor:'blue'}}></View>
            <View style={{width:100,height:100,backgroundColor:'black'}}></View>
        </View>
    );
}
export default App;

App-flexbox02.js
import React from "react";
import { View } from "react-native";
const App = () => {
    return (
        <View style={{
            flex:1,
            justifyContent:'space-between',
            alignItems:'flex-end',
            backgroundColor:'gray',
            }}>
            <View style={{width:100,height:100,backgroundColor:'red'}}></View>
            <View style={{width:100,height:100,backgroundColor:'blue'}}></View>
            <View style={{width:100,height:100,backgroundColor:'black'}}></View>
        </View>
    );
}
export default App;

//gui,fontSOURCE CODE:
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';
const App = () => {
  const [inputText, setInputText] = useState('Sample Text');
  const [fontStyle, setFontStyle] = useState({
    fontWeight: 'normal',
    fontStyle: 'normal',
    textDecorationLine: 'none',
    color: '#333',
  });
  const handleTextChange = (text) => {
    setInputText(text);
  };
  const toggleFontStyle = (style) => {
    setFontStyle((prevStyles) => {
      return {
        fontWeight: style.fontWeight !== undefined ? style.fontWeight : prevStyles.fontWeight,
        fontStyle: style.fontStyle !== undefined ? style.fontStyle : prevStyles.fontStyle,
        textDecorationLine: style.textDecorationLine !== undefined ? style.textDecorationLine : prevStyles.textDecorationLine,
        color: style.color !== undefined ? style.color : prevStyles.color,
      };
    });
  };
  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        value={inputText}
        onChangeText={handleTextChange}
        placeholder="Enter text"
      />
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.button}
          onPress={() => toggleFontStyle({ fontWeight: fontStyle.fontWeight === 'normal' ? 'bold' : 'normal' })}
        >
          <Text style={styles.buttonText}>Toggle Bold</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.button}
          onPress={() => toggleFontStyle({ fontStyle: fontStyle.fontStyle === 'normal' ? 'italic' : 'normal' })}
        >
          <Text style={styles.buttonText}>Toggle Italic</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.button}
          onPress={() => toggleFontStyle({ textDecorationLine: fontStyle.textDecorationLine === 'none' ? 'underline' : 'none' })}
        >
          <Text style={styles.buttonText}>Toggle Underline</Text>
        </TouchableOpacity>
      </View>
      <TouchableOpacity
          style={styles.button}
          onPress={() => toggleFontStyle({ color: fontStyle.color === '#333' ? '#ff0000' : '#333' })}
        >
          <Text style={styles.buttonText}>Toggle Color</Text>
        </TouchableOpacity>
      <Text style={[styles.result, fontStyle]}>{inputText}</Text>
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'pink',
  },
  input: {
    width: '80%',
    height: 40,
    borderColor: 'black',
    borderWidth: 3,
    padding: 10,
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  buttonContainer: {
    flexDirection: 'row',
    marginBottom: 20,
  },
  button: {
    marginHorizontal: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    backgroundColor: 'lightblue',
    borderRadius: 5,
  },
  buttonText: {
    color: 'black',
  },
  result: {
    fontSize: 40,
  },
});
export default App;


//price&propsstate 

SOURCE CODE:
import React from 'react';
import { View, Text, Image, StyleSheet } from 'react-native';
const App = () => {
  const menuItems = [
    {
      name: 'Caesar Salad',
      description: 'The original Caesar salad',
      description1: ' recipe',
      image: require('./images/pic1.png'),
      image1: require('./images/pic5.png'),
      price: '12 EUR',
    },
    {
      name: 'Spaghetti Carbonara',
      description: 'Better than your nonnas!',
      description1: 'All local and fresh ingerdients',
      image: require('./images/pic2.png'),
      image1: require('./images/pic5.png'),
      price: '12 EUR',
    },
    {
      name: 'Grilled Whole Fish',
      description: 'Fish of the day, grilled whole with a',
      description1: 'side of vegetables',
      image: require('./images/pic3.png'),
      image1: require('./images/pic5.png'),
      price: '12 EUR',
    },
    {
      name: 'Steak Florentine',
      description: 'Meat!',
      description1: '',
      image: require('./images/pic4.png'),
      image1: require('./images/pic5.png'),
      price: '12 EUR',
    },
  ];
  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Wild Restaurant Menu</Text>
      {menuItems.map((item, index) => (
        <View key={index} style={styles.menuItem}>
          <Image source={item.image} style={styles.image} />
          <View style={styles.itemDetails}>
            <Text style={styles.name}>{item.name}</Text>
            <Text style={styles.description}>{item.description}</Text>
            <Text style={styles.description1}>{item.description1}</Text>
          </View>
          <Text style={styles.price}>{item.price}</Text>
          <Image source={item.image1} style={styles.image1} />
        </View>
      ))}
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 3,
    backgroundColor: '#fff',
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    alignItems: 'center',
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'left',
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 8,
    borderRadius: 8,
  },
  image: {
    width: 50,
    height: 50,
    borderRadius: 8,
  },
  image1: {
    flex: 1,
    width: 15,
    height: 15,
    borderRadius: 8,
    justifyContent: 'flex-end',
    resizeMode: 'contain',
  },
  itemDetails: {
    marginLeft: 16,
  },
  name: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  price: {
    flex: 1,
    fontSize: 10,
    color: 'green',
    textAlign: 'right',
  },
});
export default App;


//touchableopacity
import React from 'react';
import { View, Text, TouchableHighlight, TouchableOpacity, StyleSheet } from 'react-native';

const TouchableExample = () => {
  const onPressHighlight = () => {
    // Action to perform when TouchableHighlight is pressed
    console.log('TouchableHighlight pressed!');
  };

  const onPressOpacity = () => {
    // Action to perform when TouchableOpacity is pressed
    console.log('TouchableOpacity pressed!');
  };

  return (
    <View style={styles.container}>
      <TouchableHighlight
        underlayColor="#DDDDDD"
        onPress={onPressHighlight}
        style={styles.highlightButton}
      >
        <Text>TouchableHighlight</Text>
      </TouchableHighlight>

      <TouchableOpacity
        onPress={onPressOpacity}
        style={styles.opacityButton}
      >
        <Text>TouchableOpacity</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  highlightButton: {
    backgroundColor: '#EEEEEE',
    padding: 10,
    borderRadius: 5,
    marginBottom: 20,
  },
  opacityButton: {
    backgroundColor: '#DDDDDD',
    padding: 10,
    borderRadius: 5,
  },
});

export default TouchableExample;
//visiting card
// MainActivity.java

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.ImageView;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Reference the views from the layout
        ImageView companyLogo = findViewById(R.id.companyLogo);
        TextView companyName = findViewById(R.id.companyName);
        TextView employeeName = findViewById(R.id.employeeName);
        TextView jobTitle = findViewById(R.id.jobTitle);
        TextView phoneNumber = findViewById(R.id.phoneNumber);

        // Set text for the views
        companyName.setText("COMPANY NAME");
        employeeName.setText("John Doe");
        jobTitle.setText("Software Developer");
        phoneNumber.setText("+1234567890");

        // Add functionality as needed
        // For example, handle clicks or other interactions
    }
}
xml
<!-- activity_main.xml -->

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Company Logo at the top right corner -->
    <ImageView
        android:id="@+id/companyLogo"
        android:layout_width="60dp"
        android:layout_height="60dp"
        android:layout_alignParentEnd="true"
        android:layout_marginEnd="20dp"
        android:layout_marginTop="20dp"
        android:src="@drawable/company_logo" />

    <!-- Company Name centered -->
    <TextView
        android:id="@+id/companyName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:text="COMPANY NAME"
        android:textSize="20sp"
        android:textStyle="bold"
        android:gravity="center" />

    <!-- Employee details -->
    <TextView
        android:id="@+id/employeeName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/companyName"
        android:layout_marginTop="20dp"
        android:text="Employee Name"
        android:textSize="16sp" />

    <TextView
        android:id="@+id/jobTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/employeeName"
        android:layout_marginTop="10dp"
        android:text="Job Title"
        android:textSize="16sp" />

    <!-- Horizontal line between job title and phone number -->
    <View
        android:id="@+id/horizontalLine"
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:layout_below="@id/jobTitle"
        android:layout_marginTop="10dp"
        android:background="#000000" />

    <TextView
        android:id="@+id/phoneNumber"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/horizontalLine"
        android:layout_marginTop="10dp"
        android:text="Phone Number"
        android:textSize="16sp" />

    <!-- Add other details like address, email, fax, and website address similarly -->
    <!-- ... -->

</RelativeLayout>


 
